The code smell that I chose is having an empty catch exception clause when an exception is thrown. The programmer will put their code in a try catch block because they don’t want their program to crash but instead be caught in an exception clause. Usually in a catch clause the programmer will print out a message to the user to what went wrong.
Example code smell:
try
      {
         enter(rid);
         rideBegin[ rid ] = false;
         while( rideBegin[rid] == false )
            this.wait();
      }
      catch (Exception e)
      { }
 This is a code smell because the catch clause is empty and it doesn’t give us any information. To fix the code smell is to print a message for what went wrong.
Example of fix code smell:
try
      {
         enter(rid);
         rideBegin[ rid ] = false;
         while( rideBegin[rid] == false )
            this.wait();
      }
      catch (Exception e)
      {
         System.out.println(e.toString());
      }
http://c2.com/cgi/wiki?EmptyCatchClause
Code Smell that I chose was duplicated code.  When writing a function in a class, your code should not have any redundancy. When the programmer has redundancy code then it should be remove because there’s no point of having it.

Dillon Hiatt

Example of Redundancy Code
Person FindUndergrade( const Person & p )
{
   For (int I = 0; i < count; i++)
     If( arrayPerson(i).IsUndergrad())
       Return arrayPerson(i);
  End loop;
 Return null;
}

Person FindGrad( const Person & p )
{
   For (int I = 0; i < count; i++)
     If( arrayPerson(i).IsGraduate())
       Return arrayPerson(i);
  End loop;
 Return null;
}
Person FindDoctrine( const Person & p )
{
   For (int I = 0; i < count; i++)
     If( arrayPerson(i).Doctrine())
       Return arrayPerson(i);
  End loop;
 Return null;
}

We can fix the problem by having one function for find a person and check to see if there an undergrad, graduate, or doctrine.

Person FindPerson( const Person & p )
{
   For (int I = 0; i < count; i++)
     If( arrayPerson(i).Doctrine())
       Return arrayPerson(i);
    Else if (arrayPerson(i).Graduate())
       Return arrayPerson(i);
   Else if (arrayPerson(i).Undergrad())
       Return arrayPerson(i);
  End loop;
   Return null;
}
http://c2.com/cgi/wiki?DuplicatedCode

Dillon Hiatt


Example of a Large Class
This code smell is when the user write a program and it has way too much of the program in one class.
It could also mean that it has too many global variables.

So lets say that a user wants to create a program about a person and their job, and they want to make a some data structure
to store a person's salary.

Class PersonAndJob {

*Here go all the necessary variable declarations for people, jobs, and data structure*

*Here go all the methods for a person*

*Here go all the methods for jobs*

Here go all the methods for data structure*

};

Instead, it should be split up as such where each class can use the others object info:

Class Person {
 *variables and methods go here*
};

Class Job {
 *variables and methods go here*
};

Class SomeDataStructure {
 *Variables and methods go here*
};
Alex Richter


Example of Too Many Paramaters
One thing that can happen when making methods is that there may be way too much information passed in.
This can lead to difficult to interpret functions, and in general are annoying to look at.

private 7DObject DoDifficultCalculations ( int x, int y, int z, int alpha, int beta, int gamma, int zed);

What we can do to fix this is either split up the function into helper functions if need be, or find a way to group all of
that information into a more useful object, like so:

private 7DObject DoDifficultCalculations ( 7DObject handy7D );

Alex Richter


Variable Name Same As Type:
This code smell deals with variables names that are the same as their type name.
Every variable should have a meaningful name and using the type name as the variable name makes the variable name useless.
Example:
   string str;
   while(cin>>str)
   {
      fstream file(str.c_str());
      while(file>>str)
      {
         cout<<str<<endl;
      }
   }

Fixed:
   string filename;
   while(cin>>filename)
   {
      fstream input(filename.c_str())
      string line;
      while(input>>line)
      {
         cout<<line<<endl;
      }
   }

Dylan Jones


While Not Done Loop:
This code smell deals with while loops that use a control boolean variable, usually called done.
The variable is set to true when the programmer wants the loop to stop.
Using a done variable usually leads to complicated loops where it's not clear what the loop does.
Example:
   bool done = false;
   int num;
   int sum = 0;
   while(!done)
   {
      cin>>num;
      if(num % 5 == 0)
         done = true;
      else
         sum += num;
   }
   cout<<sum<<endl;

Fixed:
   int num;
   int sum = 0;
   cin>>num;
   while(num % 5 != 0)
   {
      sum += num;
      cin>>num;
   }
   cout<<sum<<endl;

Dylan Jones

Another code smell is using closely related words to mean very different things.

For example, I could have a print() function, a display() function, an output() function, and a write(),
which either write to a file, display, or printer.
Then when someone wants to use our code they are uncertain what to use and have to look at documentation or the code.

A related code smell is to never settle on using one term or metaphor.
For example, using "pointer" and "reference" interchangeably, or "frame", "bound", and "window" interchangeably.
The code is extra smelly is words that have a legitimate difference are used interchangeably, like "const" and "constant" in C,
where a "const" variable is really read-only and *not* constant.

Aaron Decker
